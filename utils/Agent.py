# 用于创建Agent
import openai
import time

from utils.Function import *

class Agent:
    def __init__(self, model_name, name, temperature=1.0, sleep_time=0, api_key=None, base_url=None):
        """Create an agent

            Args:
                model_name (str): model name, e.g., 'gpt-4', 'deepseek-chat'
                name (str): name of this agent
                temperature (float): generation randomness
                sleep_time (float): optional sleep before each query
                api_key (str): API key for the model
                base_url (str): base URL for non-OpenAI models
         """

        self.model_name = model_name
        self.name = name
        self.temperature = temperature
        self.sleep_time = sleep_time
        self.api_key = api_key
        self.base_url = base_url
        self.memory_lst = []
        self.max_token = llm_MaxToken[model_name]

    def query(self, messages, max_tokens, temperature):
        """Send a query to the LLM API with streaming and error handling."""
        time.sleep(self.sleep_time)

        client = openai.OpenAI(api_key=self.api_key, base_url=self.base_url) if self.base_url else openai.OpenAI(
            api_key=self.api_key)

        # print(f"Sending request to model: {self.name} of {self.model_name} via {self.base_url}...")

        try:
            response = client.chat.completions.create(
                model=self.model_name,
                messages=messages,
                temperature=temperature,
                max_tokens=max_tokens,
                timeout=4 * 10 * 60,
            )

            response = response.choices[0].message.content
        except Exception as e:
            print(f"[Error] {e}")
            raise e

        return response

    def ask(self, temperature=0):
        num_context_token = sum([num_tokens_from_string(m["content"], self.model_name) for m in self.memory_lst])
        return self.query(self.memory_lst, self.max_token-num_context_token, temperature if temperature else self.temperature)


    def set_meta_prompt(self, meta_prompt: str):
        """Set the meta_prompt

        Args:
            meta_prompt (str): the meta prompt
        """
        self.memory_lst.append({"role": "system", "content": f"{meta_prompt}"})
        
    def event(self, event):
        """Add an new event in the memory
        Args:
            event (str): string that describe the event.
        """
        self.memory_lst.append({"role": "user", "content": f"{event}"})

    def memory(self, memory, if_memory=True, if_print=True):
        """Monologue in the memory

        Args:
            memory (str): string that generated by the model in the last round.
            if_memory: True or False
            if_print: True or False
        """
        if if_memory:
            self.memory_lst.append({"role": "assistant", "content": f"{memory}"})
        if if_print:
            print(f"----- {self.name} -----\n{memory}\n")

